package com.mogujie.tt.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.text.TextUtils;

import com.yhy.common.beans.im.entity.UserEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table UserInfo.
 */
public class UserDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "UserInfo";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PeerId = new Property(1, long.class, "peerId", false, "PEER_ID");
        public final static Property Gender = new Property(2, int.class, "gender", false, "GENDER");
        public final static Property MainName = new Property(3, String.class, "mainName", false, "MAIN_NAME");
        public final static Property PinyinName = new Property(4, String.class, "pinyinName", false, "PINYIN_NAME");
        public final static Property RealName = new Property(5, String.class, "realName", false, "REAL_NAME");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        //        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
//        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
//        public final static Property DepartmentId = new Property(9, int.class, "departmentId", false, "DEPARTMENT_ID");
//        public final static Property Status = new Property(10, int.class, "status", false, "STATUS");
        public final static Property Created = new Property(7, int.class, "created", false, "CREATED");
        public final static Property Updated = new Property(8, int.class, "updated", false, "UPDATED");
        public final static Property IsVip = new Property(9, int.class, "isVip", false, "ISVIP");
        public final static Property Options = new Property(10, int.class, "options", false, "OPTIONS");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }

    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'UserInfo' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'PEER_ID' LONG NOT NULL UNIQUE ," + // 1: peerId
                "'GENDER' INTEGER NOT NULL ," + // 2: gender
                "'MAIN_NAME' TEXT ," + // 3: mainName
                "'PINYIN_NAME' TEXT ," + // 4: pinyinName
                "'REAL_NAME' TEXT ," + // 5: realName
                "'AVATAR' TEXT ," + // 6: avatar
//                "'PHONE' TEXT NOT NULL ," + // 7: phone
//                "'EMAIL' TEXT NOT NULL ," + // 8: email
//                "'DEPARTMENT_ID' INTEGER NOT NULL ," + // 9: departmentId
//                "'STATUS' INTEGER NOT NULL ," + // 10: status
                "'CREATED' INTEGER NOT NULL ," + // 11: created
                "'UPDATED' INTEGER NOT NULL ," +
                "'ISVIP' INTEGER NOT NULL ," +
                "'OPTIONS' INTEGER NOT NULL" +
                ");"); // 12: updated
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_UserInfo_PEER_ID ON UserInfo" +
                " (PEER_ID);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UserInfo'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPeerId());
        stmt.bindLong(3, entity.getGender());
        String mainName = entity.getMainName();
        if (!TextUtils.isEmpty(mainName)) {
            stmt.bindString(4, entity.getMainName());
        }
        String pinyinName = entity.getPinyinName();
        if (!TextUtils.isEmpty(pinyinName)) {
            stmt.bindString(5, pinyinName);
        }
        String realName = entity.getRealName();
        if (!TextUtils.isEmpty(realName)) {
            stmt.bindString(6, realName);
        }
        String avatar = entity.getAvatar();
        if (!TextUtils.isEmpty(avatar)) {
            stmt.bindString(7, avatar);
        }
//        stmt.bindString(8, entity.getPhone());
//        stmt.bindString(9, entity.getEmail());
//        stmt.bindLong(10, entity.getDepartmentId());
//        stmt.bindLong(11, entity.getStatus());
        stmt.bindLong(8, entity.getCreated());
        stmt.bindLong(9, entity.getUpdated());
        stmt.bindLong(10, entity.isVip() ? 1 : 0);
        stmt.bindLong(11, entity.getOptions());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getLong(offset + 1), // peerId
                cursor.getInt(offset + 2), // gender
                cursor.getString(offset + 3), // mainName
                cursor.getString(offset + 4), // pinyinName
                cursor.getString(offset + 5), // realName
                cursor.getString(offset + 6), // avatar
                cursor.getInt(offset + 7), // created
                cursor.getInt(offset + 8), // updated
                cursor.getInt(offset + 9) == 0 ? false : true,
                cursor.getInt(offset + 10)
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPeerId(cursor.getLong(offset + 1));
        entity.setGender(cursor.getInt(offset + 2));
        entity.setMainName(cursor.getString(offset + 3));
        entity.setPinyinName(cursor.getString(offset + 4));
        entity.setRealName(cursor.getString(offset + 5));
        entity.setAvatar(cursor.getString(offset + 6));
//        entity.setPhone(cursor.getString(offset + 7));
//        entity.setEmail(cursor.getString(offset + 8));
//        entity.setDepartmentId(cursor.getInt(offset + 9));
//        entity.setStatus(cursor.getInt(offset + 10));
        entity.setCreated(cursor.getInt(offset + 7));
        entity.setUpdated(cursor.getInt(offset + 8));
        entity.setIsVip(cursor.getInt(offset + 9) == 0 ? false : true);
        entity.setOptions(cursor.getInt(offset + 10));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(UserEntity entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
